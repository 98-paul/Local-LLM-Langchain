# -*- coding: utf-8 -*-
"""Data_ingestion_drug_bank_excel

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UboVRUsEqAYkYl200vYU7PA8JSZpiSEA
"""

!apt-get install pciutils #drivers for nvidia
!curl -fsSL https://ollama.com/install.sh | sh #servr
!curl -L -o biomistral.gguf https://huggingface.co/MaziyarPanahi/BioMistral-7B-GGUF/resolve/main/BioMistral-7B.Q8_0.gguf?download=true #model - quantosed -7b parameters
!echo "FROM ./biomistral.gguf" > Modelfile #creation of modelfile

!ollama create biomistral -f Modelfile #loading modelfile into server

import os, time, random
from tqdm.auto import tqdm
from typing import Dict

! pip install -q langchain langchain-community faiss-cpu langchain-openai tiktoken
#"unstructured[md]" numpy

from langchain_community.embeddings import OllamaEmbeddings
from langchain_community.document_loaders import TextLoader
from langchain_community.vectorstores import FAISS
from langchain.docstore.document import Document

! pip install pandas

! pip install xlsxwriter

import xlsxwriter

! pip install xlrd

import pandas as pd

drug_bank = pd.read_excel('/content/drive/MyDrive/drug_bank.xlsx')

drug_bank.head()

drug_bank = drug_bank.iloc[: , 1:]

drug_bank.isnull().sum()

for col in drug_bank.columns:
    if drug_bank[col].isnull().sum() > 0:
        drug_bank[col].fillna(value=" " " ", inplace=True)


#print(drug_bank)

list_of_cols= ['description','indication','pharmacodynamics','mechanism-of-action','toxicity','metabolism','absorption',
               'half-life','route-of-elimination']

SUMMARIZE = True
GOOGLE_API_KEY = 'AIzaSyACjRnoew8oZEUAYQgTSlgFcvgrdP85OIg'

import google.generativeai as genai
genai.configure(api_key=GOOGLE_API_KEY)
model = genai.GenerativeModel('gemini-pro')

docs = []

for index, row in drug_bank.iterrows():
    drug_name = row['name']
    #row_context = ""
    for column in list_of_cols:
        info= str(row[column])
        in_prompt = "Write a single paragraph about " + column + " of  " + drug_name + "based on the following information for breast cancer:\n" + info

        max_retries = 3
        retry_count = 0

        print(index+1, ": attempting to summarize...")
        while retry_count < max_retries:
            try:
                response = model.generate_content(in_prompt)
                summary_text = response.text
                print(summary_text)

                d =  Document(page_content=summary_text, metadata={"source": drug_name,"description": column})
                docs.append(d)
                break
            except Exception as e:
                retry_count += 1
                time.sleep(random.randint(5, 15))
                print(e)
                summary_text = str(e)

    #docs.append(row_context.strip())
    print("Done.")

    docs_ = docs

docs

embeddings = OllamaEmbeddings(model="biomistral")

# %%
# Create a blank vectorstore, then incrementally add embeddings
db = FAISS.from_texts([""], embeddings)
for doc in tqdm(docs):
    db_ = FAISS.from_documents([doc], embeddings)
    db.merge_from(db_)

print(db.index.ntotal)
db.save_local("faiss_index_summarised_drug_bank_metadata_changed")
# %%

! zip -r faiss_index_summarised_drug_bank_metadata_changed.zip faiss_index_summarised_drug_bank_metadata_changed #storing the faiss_index file in the form of zip file.











